name: Publish Python Package

on:
  release:
    types: [created]
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (build but do not publish)'
        required: false
        default: false
        type: boolean

jobs:
  check-version:
    name: Check Version and Changes
    runs-on: ubuntu-latest
    # Only run on actual pushes to main, releases, or manual dispatch - not on pull requests
    if: github.event_name != 'pull_request' && (github.event_name == 'release' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      version: ${{ steps.check.outputs.version }}
      is_release: ${{ steps.check.outputs.is_release }}
      version_changed: ${{ steps.check.outputs.version_changed }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install packaging requests

    - name: Check version and determine if we should publish
      id: check
      run: |
        # Determine trigger type
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
          # Extract version from release tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_publish=true" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "üì¶ Release trigger detected: $VERSION"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "is_release=false" >> $GITHUB_OUTPUT
          # Manual trigger - we'll bump version
          echo "should_publish=true" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "üîß Manual trigger detected"
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
          # Push to main - check if version changed
          # Extract version from setup.py more reliably
          CURRENT_VERSION=$(python -c "import re; content=open('setup.py').read(); match=re.search(r'\"version\":\s*\"([^\"]+)\"', content); print(match.group(1) if match else 'unknown')" 2>/dev/null || echo "unknown")

          # Check if version exists on PyPI - use correct package name
          VERSION_CHANGED="false"
          PACKAGE_NAME="fogis-api-client-timmyBird"
          if curl -s "https://pypi.org/pypi/$PACKAGE_NAME/json" | grep -q "\"version\""; then
            PYPI_VERSION=$(curl -s "https://pypi.org/pypi/$PACKAGE_NAME/json" | python -c "import sys, json; data=json.load(sys.stdin); print(data['info']['version'])")
            echo "Current version: $CURRENT_VERSION"
            echo "PyPI version: $PYPI_VERSION"

            # Simple version comparison (assumes semantic versioning)
            if [[ "$CURRENT_VERSION" != "$PYPI_VERSION" ]]; then
              VERSION_CHANGED="true"
              echo "üìà Version change detected: $PYPI_VERSION -> $CURRENT_VERSION"
            else
              echo "‚è≠Ô∏è No version change detected"
            fi
          else
            VERSION_CHANGED="true"
            echo "üì¶ Package not found on PyPI, will publish"
          fi

          echo "version_changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          if [[ "$VERSION_CHANGED" == "true" ]]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "üìà Will publish to PyPI"
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping PyPI publish"
          fi
        fi

  build-and-publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_publish == 'true'

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine bump2version

    - name: Bump version (if manual trigger)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "üî¢ Bumping version (${{ github.event.inputs.version_type }})"
        bump2version ${{ github.event.inputs.version_type }} --verbose
        NEW_VERSION=$(python -c "import re; content=open('setup.py').read(); match=re.search(r'\"version\":\s*\"([^\"]+)\"', content); print(match.group(1) if match else 'unknown')")
        echo "New version: $NEW_VERSION"

    - name: Update version for release
      if: needs.check-version.outputs.is_release == 'true'
      run: |
        VERSION=${{ needs.check-version.outputs.version }}
        echo "üì¶ Setting version to: $VERSION"
        sed -i "s/version=\".*\"/version=\"$VERSION\"/" setup.py

    - name: Verify setup.py
      run: |
        echo "üìã Current setup.py version configuration:"
        python -c "import re; content=open('setup.py').read(); match=re.search(r'\"version\":\s*\"([^\"]+)\"', content); print(f'Version: {match.group(1)}' if match else 'Version: unknown')"
        python setup.py check

    - name: Build package
      run: |
        echo "üî® Building package..."
        python -m build
        echo "üì¶ Built packages:"
        ls -la dist/

    - name: Check package
      run: |
        echo "üîç Checking package integrity..."
        twine check dist/*

    - name: Publish to PyPI (dry run)
      if: github.event.inputs.dry_run == 'true'
      run: |
        echo "üß™ Dry run - would publish these packages:"
        twine check dist/* --strict
        echo "‚úÖ Packages are valid and ready for publishing"

    - name: Publish to PyPI
      if: github.event.inputs.dry_run != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

    - name: Create GitHub release (if version bump)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const version = await exec.getExecOutput('python', ['-c', `
          import re
          with open('setup.py', 'r') as f:
              content = f.read()
              match = re.search(r'"version":\\s*"([^"]+)"', content)
              if match:
                  print(match.group(1))
              else:
                  print('unknown')
          `]);
          const newVersion = version.stdout.trim();

          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `v${newVersion}`,
            name: `Release v${newVersion}`,
            body: `## Release v${newVersion}

            This release was automatically created after publishing to PyPI.

            ### Changes
            - Version bump: ${{ github.event.inputs.version_type }}
            - Published to PyPI: https://pypi.org/project/fogis-api-client/${newVersion}/

            ### Installation
            \`\`\`bash
            pip install fogis-api-client==${newVersion}
            \`\`\`

            _This release was automatically created by the publish workflow._`,
            draft: false,
            prerelease: false
          });

          console.log(`Created release: ${release.html_url}`);

    - name: Notify success
      if: success()
      run: |
        VERSION=${{ needs.check-version.outputs.version }}
        echo "üéâ Successfully published fogis-api-client v$VERSION to PyPI!"
        echo "üì¶ Package URL: https://pypi.org/project/fogis-api-client/$VERSION/"

  build-and-publish-container:
    name: Build and Publish Container to GHCR
    runs-on: ubuntu-latest
    needs: [check-version, build-and-publish]
    if: needs.check-version.outputs.should_publish == 'true'

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}},value=${{ needs.check-version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.check-version.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.check-version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.check-version.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Notify container success
      if: success()
      run: |
        VERSION=${{ needs.check-version.outputs.version }}
        echo "üê≥ Successfully published container to GHCR!"
        echo "üì¶ Container URL: ghcr.io/${{ github.repository }}:$VERSION"
        echo "üîó Container Registry: https://github.com/${{ github.repository }}/pkgs/container/$(echo ${{ github.repository }} | cut -d'/' -f2)"
