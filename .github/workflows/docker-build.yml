name: Docker Build and Test

on:
  push:
    branches: [ "main", "develop", "feature/*" ]
  pull_request:
    branches: [ "main", "develop" ]
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

jobs:
  docker-unit-tests:
    name: Docker Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run CI dependency check
        run: |
          ./scripts/ci_dependency_check.sh

      - name: Build test Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: false
          load: true
          tags: fogis-api-client:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run unit tests
        run: |
          # Build the test Docker image
          docker build -t fogis-api-client-test -f Dockerfile.test .

          # Run the unit tests inside the Docker container
          docker run --rm fogis-api-client-test ./scripts/run_unit_tests.sh

  docker-integration-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: docker-unit-tests  # Only run after unit tests pass
    continue-on-error: true  # Allow the workflow to continue even if integration tests fail
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: false
          load: true
          tags: fogis-api-client:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create test environment
        run: |
          mkdir -p data logs test-results
          # Create both .env and .env.dev files for compatibility
          echo "FOGIS_USERNAME=test_user" > .env
          echo "FOGIS_PASSWORD=test_password" >> .env
          echo "FLASK_ENV=development" >> .env
          echo "FLASK_DEBUG=1" >> .env

          # Copy to .env.dev as well
          cp .env .env.dev

          # Create the Docker network
          docker network create fogis-network || true

      - name: Run integration tests
        run: |
          # Make the CI test script executable
          chmod +x ./run_ci_tests.sh

          # Run the integration tests
          ./run_ci_tests.sh

  docker-build-prod:
    runs-on: ubuntu-latest
    needs: [docker-unit-tests, docker-integration-tests]
    if: github.event_name == 'release'  # Only run on release events
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/fogis-api-client
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha

      - name: Build and push production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max